<?xml version="1.0" encoding="utf-8"?>
<InstrumentoEvaluacion xmlns="*" xmlns:mx="http://www.adobe.com/2006/mxml" borderColor="#0C6D05" borderThickness="1" backgroundColor="#D2E7C9">
	<mx:VBox minWidth="1200">
	<mx:Button id="buttonBorrar" click="borrar()" width="12" cornerRadius="0" icon="@Embed(source='../img/iconClose2.gif')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" height="12" visible="false"/>
	<mx:HBox id="encabezado"  horizontalGap="12" x="10" y="12" paddingLeft="10" minWidth="1200">
		<mx:Label x="10" y="12" text="{resourceManager.getString('myBundle', 'control_list') + ':'}" fontWeight="bold" id="LabelTitutlo"/>
		<mx:TextArea text="@Resource(bundle='myBundle', key='title')" id="nomDim" x="106" y="10" width="200"/>
		<mx:Label x="440" y="12" text="@Resource(bundle='myBundle', key='n_dimensions')" fontWeight="bold" id="LabelDimensiones"/>
		<mx:TextInput id="numDim" x="541" y="10" width="42" restrict="/0-9/"/>
		<mx:Button id="buttonInsertar" x="591" y="10" width="30" cornerRadius="0" click="insertar(1, event);">
			<mx:icon>@Embed(source='../img/iconDown.gif')</mx:icon>
		</mx:Button>
		<mx:Label x="725" y="12" text="@Resource(bundle='myBundle', key='grade')" fontWeight="bold" id="LabelNota" textAlign="right"/>
		<mx:TextInput id="notaText" x="820" y="10" width="40" editable="false" fontWeight="bold" backgroundColor="#000000" color="#FFFFFF" text="0" textAlign="right" updateComplete="actualizarNotaPadre()"/>		
		<mx:HBox id="panelPorcentaje" width="100%" height="100%" visible="false">
			<mx:Label text="@Resource(bundle='myBundle', key='percentage')" toolTip="@Resource(bundle='myBundle', key='help_percentage')" id="LabelPorcentaje"/>
			<mx:TextInput width="34" maxChars="3" id="porcentajeText" backgroundColor="#000000" color="#00F00F" fontFamily="Verdana" fontWeight="bold" textAlign="right" restrict="/0-9/"/>
			<mx:Button id="buttonPorcentaje" width="18" cornerRadius="0" icon="@Embed(source='../img/iconPrctg.gif')" click="insertarPorcentaje(0, event);"/>
		</mx:HBox>
	</mx:HBox>
	<mx:HBox width="100%" paddingLeft="10" id="panelDescripcion">
		<mx:Label text="@Resource(bundle='myBundle', key='instrument_description')" fontWeight="bold"/>
		<mx:Button icon="@Embed(source='../img/iconRevisar.gif')" width="20" height="20" cornerRadius="0" id="buttonDescripcion" click="verDescripcion()"/>
	</mx:HBox>
	<mx:VBox id="panel" y="36" width="100%" horizontalAlign="center" borderStyle="none" borderThickness="2" borderColor="#0B5981" alpha="1.0" backgroundColor="#F77808" backgroundAlpha="0.0" paddingLeft="30" paddingRight="10">
	</mx:VBox>
	<mx:Button id="buttonAnyadir" click="anyadir()" x="1" y="44" width="12" cornerRadius="0" icon="@Embed(source='../img/iconAnyadir.gif')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" height="12" visible="false"/>
	<mx:Script>
		<![CDATA[
			import mx.events.ResizeEvent;
			import mx.effects.Resize;
			//import mx.controls.*;
			use namespace mx_internal;
			import mx.events.FlexEvent;
			import utilidades.Constants;
			import utilidades.Common;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			
			private var dimensiones:ArrayCollection = new ArrayCollection();
			private var nota:int = 0;
			private var evaluacion:Boolean = false;
			// Atributos para la revisión
			private var labelNotaRevision:Label = null;
			private var textNotaRevision:TextInput = null;
			
			public override function setName(nombre:String):void
			{
				this.nomDim.text = nombre;
			}
			
			public override function getName():String
			{
				return this.nomDim.text;
			}
			
			public function setNumDim(numDim:int):void
			{
				this.numDim.text = numDim.toString();
			}
			
			public function getNumDim():int
			{
				return this.dimensiones.length;
			}
			
			/** 
			 * Método que inserta un número determinado de dimensiones en el objeto actual
			 */
			public function insertar(numDimensiones:int, event:MouseEvent=null):void
			{
				if(event != null)
				{
					numDimensiones = Common.parse_int(this.numDim.text);	
					if(numDimensiones < 0)
					{
						Alert.show(resourceManager.getString("myBundle", "warning_num_dims"), resourceManager.getString("myBundle", "warning"));
					}
				}
				if(numDimensiones >= 0)
				{
					if(this.dimensiones.length > 0)
					{
						// Si el nuevo número de atributos es mayor
						if(dimensiones.length < numDimensiones)
						{
							// Insertamos nuevos atributos al final
							var newDimensiones:int = numDimensiones;
							for(var i:int = dimensiones.length; i < newDimensiones; i++)
							{
								var dimension:Dimension = new Dimension();
								// Debemos comprobar que el nuevo nombre que insertamos no está repetido
								var nombre:String = renombrarDimension(i);
								addDimension(dimension);
								dimension.nombre.text = nombre;
								// Establecemos a 0 el porcentaje del nuevo elemento
								if(dimensiones.getItemAt(0) != null)
								{
									if((dimensiones.getItemAt(0) as Dimension).getPorcentaje() != -1)
									{
										//dimension.setPorcentaje(0);
										dimension.insertarPorcentaje((int)(100/(this.getDimensiones().length)));
									}
								}
							}
						}
						else
						{
							// Si el nuevo número de atributos es menor
							if(dimensiones.length > numDimensiones)
							{
								// Eliminamos los últimos atributos
								var newDimensiones:int = numDimensiones;
								for(var i:int = dimensiones.length - 1; i >= newDimensiones; i--)
								{
									removeDimension(dimensiones.getItemAt(i) as Dimension);
								}
								// Actualizamos los porcentajes del resto de subdimensiones
								var total:int = 0;
								for(var i:int = 0; i < dimensiones.length; i++)
								{
									total += (dimensiones.getItemAt(i) as Dimension).getPorcentaje();
								}
								if(total > 0)
								{
									for(var i:int = 0; i < dimensiones.length; i++)
									{
										var dim:Dimension = dimensiones.getItemAt(i) as Dimension;
										if(dim.getPorcentaje() != -1)
										{
											var newPorcentaje:int = (dim.getPorcentaje()/total) * 100;
											//var newPorcentaje:int = subDim.getPorcentaje() * (oldSubDimensiones/newSubdimensiones) * (total/100));//(oldSubDimensiones/newSubDimensiones) / (total/newSubDimensiones);
											dim.setPorcentaje(newPorcentaje);
										}
									}
								}
								else if(total == 0)
								{
									for(var i:int = 0; i < dimensiones.length; i++)
									{
										var dim:Dimension = dimensiones.getItemAt(i) as Dimension;
										dim.setPorcentaje(100/dimensiones.length);
									}		
								}
							}
						}
					}
					// Si es la primera vez que insertamos
					else
					{
						var dimensiones:int = numDimensiones; 
						for(var i:int = 0; i < dimensiones; i++)
						{
							var dim:Dimension = new Dimension();
							addDimension(dim);
							dim.nombre.text = "Dimension" + i;
							// Establecemos el porcentaje, por defecto el mismo a todas las dimensiones
							dim.setPorcentaje((int)(100/numDimensiones));
						}
					}
				}
			}
			
			public function addDimension(dim:Dimension, index:int=-1):void
			{
				// Primero añadimos los listener
				dim.addEventListener(Event.REMOVED, actualizarNota);
				dim.addEventListener(Event.CHANGE, actualizarNota);
				// Ahora añadimos los elementos
				if(index == -1)
				{
					panel.addChild(dim);
					this.dimensiones.addItem(dim);
					dim.setRubrica(this);
				}
				else
				{
					panel.addChildAt(dim, index);
					this.dimensiones.addItemAt(dim, index);
					dim.setRubrica(this);
				}
			}
			
			public function renombrarDimension(pos:int):String
			{
				// Debemos comprobar que el nuevo nombre que insertamos no está repetido
				var index:int = pos;
				var seguir:Boolean = true;
				var nombre:String = "Dimension" + index;
				while(seguir)
				{
					var existe:Boolean = false;
					for(var j:int = 0; j < dimensiones.length; j++)
					{
						if((dimensiones.getItemAt(j) as Dimension).nombre.text == nombre)
						{
							nombre = "Dimension" + (index++);
							existe = true;
						}
					}
					seguir = existe;
				}
				return nombre;
			}
			
			public function removeDimension(dim:Dimension, actualizarContador:Boolean=false):void
			{
				for(var i:int = 0; i < dimensiones.length; i++)
				{
					if(dimensiones.getItemAt(i) == dim)
					{
						panel.removeChildAt(i);
						dimensiones.removeItemAt(i);
						if(actualizarContador)
						{	
							this.numDim.text = (parseInt(this.numDim.text) - 1).toString();
						}
					}
				}   
			}
			
			public function getDimensiones():ArrayCollection
			{
				return this.dimensiones;
			}
			
			/**
			 * Obtiene el porcentaje evitando redondeos hacia abajo
			 */
			public function getPorcentajeTotal():Number
			{
				var porcentajeTotal:Number = 0;
				for(var i:int = 0; i < dimensiones.length; i++)
				{
					porcentajeTotal += (dimensiones.getItemAt(i) as Dimension).getPorcentaje();
				}
				return porcentajeTotal;
			}
			
			/**
			 * Establece los porcentajes por defecto para cada una de las dimensiones
			 */
			public function setPorcentajesPorDefecto(porcentajeDimensiones:int):void
			{
				// Si el porcentaje es menor que el valor por defecto
				if(porcentajeDimensiones < Constants.PORCENTAJE_MINIMO)
				{
					var porcentaje:int = (100/this.getDimensiones().length);
					for(var i:int = 0; i < this.getDimensiones().length; i++)
					{
						var dim:Dimension = this.getDimensiones().getItemAt(i) as Dimension;
						dim.setPorcentaje(porcentaje);
					}	
				}
			}
			
			/**
			 * Devuelve la nota obtenida en la lista de control respecto a la nota de sus dimensiones
			 */
			public override function getNota():int
			{
				var nota:Number = 0;
				for(var i:int = 0; i < this.dimensiones.length; i++)
				{
					nota += (dimensiones.getItemAt(i) as Dimension).getNota();
				}
				return Common.redondear(nota*100/getPorcentajeTotal());
			}
			
			public override function actualizarNota(event:Event=null):void
			{
				this.nota = nota;
				this.notaText.text = getNota().toString();
			}
			
			public override function toXML(child:Boolean=false):String
			{
				if(child)
				{
					var texto:String = '<ControlList name="' + this.getName() + '" dimensions="' + dimensiones.length + '"';
					if(this.getPorcentaje() > -1)
					{
						texto += ' percentage="' + this.getPorcentaje() + '">\n';
					}
					else
					{
						texto += '>\n';
					}
					// Descripción del instrumento
					if(this.getDescripcion())
					{
						texto += "<Description>" + this.getDescripcion() + "</Description>\n";
					}
					for(var i:int = 0; i < dimensiones.length; i++)
					{
						texto += (dimensiones.getItemAt(i) as Dimension).toXML(1) + "\n";
					}
					texto += "</ControlList>";
					return texto;
				}
				else
				{
					var texto:String = '<cl:ControlList xmlns:cl="' + Constants.CONTROL_LIST_NS + '"' +
					'\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
					'\nxsi:schemaLocation="' + Constants.CONTROL_LIST_NS + ' ' + Constants.CONTROL_LIST_XSD + '"' + 
					'\nname="' + this.getName() + '" dimensions="' + dimensiones.length + '">\n';
					// Descripción del instrumento
					if(this.getDescripcion())
					{
						texto += "<Description>" + this.getDescripcion() + "</Description>\n";
					}
					for(var i:int = 0; i < dimensiones.length; i++)
					{
						texto += (dimensiones.getItemAt(i) as Dimension).toXML(1) + "\n";
					}
					texto += "</cl:ControlList>";
					return texto;
				}
			}
			
			public function verXML():void
			{
				Alert.show(this.toXML());
			}
			
			public override function setPorcentaje(porcentaje:int):void
			{
				if(porcentaje <= 100 && porcentaje >= 0)
				{
					super.setPorcentaje(porcentaje);
					this.porcentajeText.text = porcentaje.toString();
				}
			}
			
			public override function getPorcentajeText():int
			{
				return parseInt(porcentajeText.text);
			}
			
			public override function setPorcentajeText(porcentaje:String):void
			{
				this.porcentajeText.text = porcentaje;
			}
			
			/**
			 * Muestra las opciones de edición cuando un instrumento se encuentra dentro de otro
			 */
			public override function setVistaHerramientaMixta():void
			{
				this.buttonAnyadir.visible = true;
				this.buttonBorrar.visible = true;
				this.panelPorcentaje.visible = true;
			}
			
			/**
			 * Oculta las opciones de edición cuando un instrumento se encuentra dentro de otro
			 */
			public override function ocultarVistaHerramientaMixta():void
			{
				this.buttonAnyadir.visible = false;
				this.buttonBorrar.visible = false;
				//this.panelPorcentaje.visible = false;
			}
			
			/**
			 * Deshabilita las opciones de edición para mostrar la ventana de evaluación
			 */
			public override function setVistaEvaluacion():void
			{
				this.nomDim.editable = false;
				this.numDim.editable = false;
				this.buttonInsertar.visible = false;
				this.buttonPorcentaje.enabled = false;
				this.porcentajeText.editable = false;
				// Eliminamos los elementos sobrantes
				/*
				this.LabelDimensiones.visible = false;
				this.numDim.visible = false;
				*/
				if(encabezado.contains(this.LabelDimensiones))encabezado.removeChild(this.LabelDimensiones);
				if(encabezado.contains(this.numDim))encabezado.removeChild(this.numDim);
				
				// Ajustamos la altura de los campos de texto
				var fuente:int = this.nomDim.getStyle("fontSize");
				//this.nomDim.setStyle("fontSize", fuente+2); 
				this.nomDim.setStyle("fontStyle", "italic");
				// Ponemos en negrita el título
				this.nomDim.setStyle("fontWeight", "bold");
				this.nomDim.validateNow();
				// Ajustamos la anchura del título hasta un máximo
				var altura:Number = this.nomDim.getTextField().textHeight;
				while(this.nomDim.getTextField().textHeight > this.nomDim.getStyle("fontSize")*2 && this.nomDim.width < 600)
				{
					this.nomDim.width = this.nomDim.width*(1.1);
				}
				this.nomDim.validateNow();
				this.nomDim.height = this.nomDim.getTextField().textHeight + this.nomDim.getLineMetrics(0).height;

				// Establecemos la vista de evalación para los elementos hijo
				var elementos:ArrayCollection = this.getDimensiones();
				for(var i:int = 0; i < elementos.length; i++)
				{
					(elementos.getItemAt(i) as Dimension).setVistaEvaluacion();
				}
				
				// Si es el caso, ocultamos la vista mixta
				this.ocultarVistaHerramientaMixta();
			}
			
			public override function ajustarTamanyo(evaluacion:Boolean=false):void
			{
				if(evaluacion)
				{
					this.nomDim.validateNow();
					this.nomDim.height = this.nomDim.getTextField().textHeight + this.nomDim.getLineMetrics(0).height;
					var elementos:ArrayCollection = this.getDimensiones();
					for(var i:int = 0; i < elementos.length; i++)
					{
						(elementos.getItemAt(i) as Dimension).ajustarAltura();
					}
				}
			}
			
			public override function getAdvertencias(advertencias:ArrayCollection):void
			{
				// Comprobamos el nombre
				if(this.getName() == null || Common.trim(this.getName()) == "")
				{
					advertencias.addItem(resourceManager.getString("myBundle", "warning_instrument_name") + "\n" + this.localization());
				}
				// Comprobamos los elementos
				for(var i:int = 0; i < this.getDimensiones().length; i++)
				{
					(this.getDimensiones().getItemAt(i) as Dimension).getAdvertencias(advertencias);
				}
				if(this.getHerramientaMixta() != null)
				{
					if(this.getPorcentaje() == 0)
					{
						advertencias.addItem(resourceManager.getString("myBundle", "warning_instrument_percentage") + "\n" + this.localization());
					}
				}
			}
			
			public override function getErrores(errores:ArrayCollection):void
			{
				// Comprobamos si está vacía
				if(this.getDimensiones() == null || this.getDimensiones().length == 0)
				{
					errores.addItem(resourceManager.getString("myBundle", "error_instrument_empty") + "\n" + this.localization());
				}
				// Comprobamos los atributos
				for(var i:int = 0; i < this.getDimensiones().length; i++)
				{
					(this.getDimensiones().getItemAt(i) as Dimension).getErrores(errores);
				}
			}
			
			private function localization():String
			{
				var localizacion:String =
				resourceManager.getString("myBundle", "control_list") + ":" + this.getName();
				return localizacion;
			}
			
			public override function revisar(infoRevision:ArrayCollection):void
			{
				try
				{
					if(infoRevision != null)
					{
						var dimensiones:ArrayCollection = this.getDimensiones();
						for(var i:int = 0; i < dimensiones.length; i++)
						{
							var subdimensiones:ArrayCollection = (dimensiones.getItemAt(i) as Dimension).getSubDimensiones();
							var subdimensionesRevision:ArrayCollection = infoRevision.getItemAt(i) as ArrayCollection;
							for(var j:int = 0; j < subdimensiones.length; j++)
							{
								var atributos:ArrayCollection = (subdimensiones.getItemAt(j) as Subdimension).getAtributos();
								var atributosRevision:ArrayCollection = subdimensionesRevision.getItemAt(j) as ArrayCollection;
								for(var k:int = 0; k < atributos.length; k++)
								{
									var atributo:Atributo = atributos.getItemAt(k) as Atributo;
									var atributoRevision:AtributoGenerico = atributosRevision.getItemAt(k) as AtributoGenerico;
									// Revisamos
									atributo.revisar(atributoRevision);
								}
							}
						}
					}
				}
				catch(e:Error)
				{
					Alert.show(resourceManager.getString("myBundle", "error_response_format"), resourceManager.getString("myBundle", "error"));
				}
			}
			
			public override function setVistaRevision(notaRevisor:String):void
			{
				this.labelNotaRevision = new Label();
				this.labelNotaRevision.text = resourceManager.getString("myBundle", "coexaminer_grade");
				this.encabezado.addChild(labelNotaRevision);
				this.textNotaRevision = new TextInput();
				this.textNotaRevision.text = notaRevisor;
				this.textNotaRevision.setStyle("backgroundColor", 0x00ae00);
				this.textNotaRevision.setStyle("color", 0xffffff);
				this.textNotaRevision.setStyle("fontWeight", "bold");
				this.textNotaRevision.setStyle("textAlign", "right");
				this.encabezado.addChild(textNotaRevision);
				textNotaRevision.width = 40;
				textNotaRevision.editable = false;
				// Recorremos los elementos anidados
				var dimensiones:ArrayCollection = this.getDimensiones();
				for(var i:int = 0; i < dimensiones.length; i++)
				{
					var subdimensiones:ArrayCollection = (dimensiones.getItemAt(i) as Dimension).getSubDimensiones();
					for(var j:int = 0; j < subdimensiones.length; j++)
					{
						var atributos:ArrayCollection = (subdimensiones.getItemAt(j) as Subdimension).getAtributos();
						for(var k:int = 0; k < atributos.length; k++)
						{
							(atributos.getItemAt(k) as Atributo).setVistaRevision();
						}
					} 	
				}
			}
		]]>
	</mx:Script>
	</mx:VBox>
</InstrumentoEvaluacion>
