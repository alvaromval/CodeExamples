<?xml version="1.0" encoding="utf-8"?>
<VentanaGenerica xmlns="*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import utilidades.Common;
			import mx.rpc.http.HTTPService;
			import utilidades.Constants;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import parser.ControladorParser;
			import mx.rpc.events.ResultEvent;
			
			private var tipo:String = null; // Instrumento o evaluación
			
			/**
			 * Establece el identificador del instrumento a recuperar y el identificador de la instancia a guardar
			 * con la evaluación realizada
			 */
			public function inicializar(identificador:String, tipo:String):void
			{	
				super.init(identificador);
				this.setVistaEvaluacion(true);
				this.tipo = tipo; 	
				// Como estamos en una ventana de consulta, deshabilitamos el guardado
				this.deshabilitarGuardar();
				this.deshabilitarVistaPrevia();	     
	        	// Debemos obtener la estructura por http
				var servicio:HTTPService = new HTTPService();
				if(tipo == "instrument")
				{
					servicio.url = Constants.URL_ObtenerInstrumento + "/" + this.getIdentificador();
				}
				else if(tipo == "assessment")
				{
					servicio.url = Constants.URL_ObtenerEvaluacion + "/" + this.getIdentificador();
				}
				servicio.method = "POST";
				servicio.resultFormat = "xml";
				// Añadimos los manejadores para procesar la respuesta
				servicio.addEventListener(ResultEvent.RESULT, manejadorObtener);
				servicio.addEventListener(FaultEvent.FAULT, manejadorErrorObtener);
				// Enviamos
				servicio.send();
			}
			
			private function manejadorObtener(event:ResultEvent):void
			{
				// El resultado es un XML
				var response:String = event.result.toString();
	      		var xmlDoc:XMLDocument;
	      		try
	        	{
	        		// Comprobamos si el resultado es un XML
	         		xmlDoc = new XMLDocument(response);
	         		// Procesamos el XML
	                var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);
	                var resultObj:Object = decoder.decodeXML(xmlDoc);
                	// Si la operación se ha realizado correctamente
                	if(tipo == "instrument")
                	{
                		if(resultObj.instrument != null)
		                {	
				        	this.setEstructura(resultObj.instrument.structure);
		                }		
		               	else if(resultObj.error != null)
		               	{
		                	Alert.show(resultObj.error, "Error");
		                	this.enabled = false;
		                }
                	}
                	else if(tipo == "assessment")
                	{
                		if(resultObj.assessment != null)
		                {	
		                	this.setEstructura(resultObj.assessment.structure);
							// Creamos la interfaz con la información devuelta
				        	var cp:ControladorParser = new ControladorParser();
				        	cp.parse(this.getEstructura(), this);
		                }		
		               	else if(resultObj.error != null)
		               	{
		                	Alert.show(resultObj.error, "Error");
		                	this.enabled = false;
		                }
                	}
	                
	         	}
	          	catch(error:Error)
	        	{
	        		Alert.show(resourceManager.getString("myBundle", "error_response_format"), resourceManager.getString("myBundle", "error"));
	        		this.enabled = false;
	       		}
			}
			
			private function manejadorErrorObtener(event:FaultEvent):void
			{
				Alert.show(resourceManager.getString("myBundle", "error_response"), resourceManager.getString("myBundle", "error"));
				this.enabled = false;
			}
			
			/**
			 * Añade un instrumento de evaluación a la interfaz visual del objeto actual
			 */
			public override function anyadirInstrumento(instrumento:InstrumentoEvaluacion):void
			{
				super.anyadirInstrumento(instrumento);
				// Como lo que vamos a realizar es una evaluación, deshabilitamos la edición
				instrumento.setVistaEvaluacion();
			}
		]]>
	</mx:Script>
</VentanaGenerica>