<?xml version="1.0" encoding="utf-8"?>
<ElementoRubrica xmlns="rubrica.*" xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#DBE8DB" borderStyle="solid" borderThickness="2" borderColor="#FFFFFF" xmlns:ns1="rubrica.*">
	<mx:Button id="buttonBorrar" click="borrar()" x="1" y="0" width="12" cornerRadius="0" icon="@Embed(source='../img/iconClose2.gif')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" height="12"/>
	<mx:HBox id="encabezado" x="10" y="10" horizontalGap="12" paddingLeft="10">
		<mx:Label text="@Resource(bundle='myBundle', key='dimension')" fontWeight="bold"/>
		<mx:TextArea id="nombre" width="200"/>
		<mx:Label id="LabelSubdimensiones" x="384" y="10" text="@Resource(bundle='myBundle', key='n_subdimensions')"/>
		<mx:TextInput id="numSubDim" width="42" restrict="/0-9/"/>
		<mx:Label id="LabelValores" x="555" y="10" text="@Resource(bundle='myBundle', key='n_values')"/>
		<mx:TextInput id="numVal" x="650" y="8" width="42" restrict="/0-9/"/>
		<mx:CheckBox label="@Resource(bundle='myBundle', key='global_assessment_check')" fontWeight="bold" color="#0B333C" labelPlacement="left" id="valGlobal"/>
		<mx:Button id="buttonInsertar" x="826" y="8" width="30" cornerRadius="0" click="insertar();">
			<mx:icon>@Embed(source='../img/iconDown.gif')</mx:icon>
		</mx:Button>
		<mx:Label x="883" y="10" text="@Resource(bundle='myBundle', key='percentage')" toolTip="@Resource(bundle='myBundle', key='help_percentage')"/>
		<mx:TextInput x="999" y="8" width="34" maxChars="3" restrict="/0-9/" id="porcentajeText" backgroundColor="#000000" color="#00F00F" fontFamily="Verdana" fontSize="10" fontWeight="bold" textAlign="right"/>
		<mx:Button id="buttonPorcentaje" x="1035" y="8" width="18" cornerRadius="0" icon="@Embed(source='../img/iconPrctg.gif')" click="insertarPorcentaje(0, event);"/>
	</mx:HBox>
		<ns1:ValoresDimension id="valoresBox" verticalScrollPolicy="off">
		</ns1:ValoresDimension>
		<mx:VBox id="panel" x="78" y="241" width="100%" horizontalAlign="left" borderStyle="none" borderThickness="2" borderColor="#0B5981" alpha="1.0" backgroundColor="#EAEDEE" backgroundAlpha="0.0" paddingLeft="30" paddingRight="10">
		</mx:VBox>
	<resize>
		<![CDATA[
			this.buttonAnyadir.y = this.height - this.buttonAnyadir.height - 5;
		]]>
	</resize>
	<mx:Button id="buttonAnyadir" click="insertarDim()" width="12" cornerRadius="0" icon="@Embed(source='../img/iconAnyadir.gif')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" height="12"/>
	<mx:Script>
		<![CDATA[
			import utilidades.Constants;
			import mx.controls.Alert;
			import utilidades.Common;
			import mx.collections.ArrayCollection;
			use namespace mx_internal;
			
			private var subDimensiones:ArrayCollection = new ArrayCollection();
			private var numSubDimensiones:int = 0;
			private var valores:ArrayCollection = new ArrayCollection();
			private var valoracionGlobal:ValoracionDimension = null;
		
			public function setName(name:String):void
			{
				this.nombre.text = name;
			}
			
			public function getName():String
			{
				return this.nombre.text;
			}
			
			public function setNumSubDim(numSubDim:int):void
			{
				this.numSubDim.text = numSubDim.toString();
			}
			
			public function getNumSubDim():int
			{
				return this.subDimensiones.length;
			}
			
			public function setNumValues(numValues:int):void
			{
				this.numVal.text = numValues.toString();
			}
			
			public function getNumValues():int
			{
				return this.valores.length;
			}
		
			/** 
			 * Método que inserta un número determinado de subDimensiones en el objeto actual y un porcentaje introducido
			 */
			private function insertar():void
			{
				var numSubDims:int = Common.parse_int(numSubDim.text);
				var numVals:int = Common.parse_int(numVal.text);
				if(numSubDims < 0)
				{
					Alert.show(resourceManager.getString("myBundle", "warning_num_subdims"), resourceManager.getString("myBundle", "warning"));
				}
				if(numVals <= 0)
				{
					Alert.show(resourceManager.getString("myBundle", "warning_num_values"), resourceManager.getString("myBundle", "warning"));
				}
				// Insertamos o actualizamos el número de subdimensiones y valores
				insertarValoresSubdimensiones(numSubDims, numVals);
			}
		
			/** 
			 * Método que inserta un número determinado de subDimensiones en el objeto actual
			 */
			private function insertarValoresSubdimensiones(numSubDims:int, numVals:int):void
			{
				if(numSubDims >= 0 && numVals > 0)
				{
					// Insertamos la valoración global
					// Si el campo de valoración global está activado y el número de valores es mayor que cero
					if(valGlobal.selected && numVals > 0)
					{
						// Si la valoración global ya existe, la actualizamos
						if(valoracionGlobal == null)
						{
							// Primero añadimos los valores
							var numValores:int = numVals;
							for(var i:int = 0; i < numValores; i++)
							{
								var vr:ValorDimension = new ValorDimension();
								// Añadimons el valor
								this.addValorDimension(vr);
								vr.nombre.text = resourceManager.getString("myBundle", "value_text") + i;
							}
							// Si la creamos por primera vez
							addValoracionGlobal(valores);
							/*if(this.getSubDimensiones().length > 0)
							{
								valoracionGlobal.setPorcentaje(0);
							}
							else
							{
								valoracionGlobal.setPorcentaje((int)(100/(numSubDims + 1)))
							}*/
							valoracionGlobal.insertarPorcentaje((int)(100/(this.getElementos().length)));
						}
					}
					if(this.subDimensiones.length > 0 || (this.getValoracionGlobal() != null && this.getValoracionGlobal().getPorcentaje() == 100))
					{
						// Si el nuevo número de atributos es mayor
						if(subDimensiones.length < numSubDims)
						{
							// Insertamos nuevos atributos al final
							var newSubDimensiones:int = numSubDims;
							for(var i:int = subDimensiones.length; i < newSubDimensiones; i++)
							{
								var subDim:Subdimension = new Subdimension();
								// Debemos comprobar que el nuevo nombre que insertamos no está repetido
								var nombre:String = renombrarSubDimension(i);
								addSubDimension(subDim, valores, i);
								subDim.nombre.text = nombre;
								// Establecemos el porcentaje a 0 para el nuevo elemento
								if(subDimensiones.getItemAt(0) != null)
								{
									//subDim.setPorcentaje(0);
									subDim.insertarPorcentaje((int)(100/(this.getElementos().length)));
								}
							}
						}
						else
						{
							// Si el nuevo número de subdimensiones es menor
							if(subDimensiones.length > numSubDims)
							{
								// Eliminamos los últimos atributos
								var newSubDimensiones:int = numSubDims;
								for(var i:int = subDimensiones.length - 1; i >= newSubDimensiones; i--)
								{
									removeSubDimension(subDimensiones.getItemAt(i) as Subdimension);
								}
								// Actualizamos los porcentajes del resto de subdimensiones
								var total:int = 0;
								var elementos:ArrayCollection = this.getElementos();
								for(var i:int = 0; i < elementos.length; i++)
								{
									total += (elementos.getItemAt(i) as ElementoDimension).getPorcentaje();
								}
								if(total > 0)
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										if(elemento.getPorcentaje() != -1)
										{
											var newPorcentaje:int = (elemento.getPorcentaje()/total) * 100;
											//var newPorcentaje:int = subDim.getPorcentaje() * (oldSubDimensiones/newSubdimensiones) * (total/100));//(oldSubDimensiones/newSubDimensiones) / (total/newSubDimensiones);
											elemento.setPorcentaje(newPorcentaje);
										}
									}
								}
								else if(total == 0)
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										elemento.setPorcentaje(100/elementos.length);
									}		
								}
							}
						}
					}
					// Si es la primera vez que insertamos
					else
					{
						// Primero añadimos los valores si no se han creado ya
						if(this.getValores().length == 0)
						{
							var numValores:int = numVals;
							for(var i:int = 0; i < numValores; i++)
							{
								var vr:ValorDimension = new ValorDimension();
								// Añadimons la subDimensión
								this.addValorDimension(vr);
								vr.nombre.text = resourceManager.getString("myBundle", "value_text") + i;
							}
						}
						// Añadimos las subdimensiones
						numSubDimensiones = numSubDims;
						for(var i:int = 0; i < numSubDimensiones; i++)
						{
							var subDim:Subdimension = new Subdimension();
							// Añadimons la subDimensión
							this.addSubDimension(subDim, this.valores, i);
							subDim.nombre.text = "SubDimension" + i;
							// Establecemos el porcentaje, por defecto el mismo a todas las subdimensiones
							if(valGlobal.selected && parseInt(numVal.text) > 0)
							{
								subDim.setPorcentaje((int)(100/(numSubDimensiones + 1)));
							}
							else
							{
								subDim.setPorcentaje((int)(100/numSubDimensiones));
							}
						}
					}
					// Ahora comprobamos si hemos modificado el número de valoraciones
					// Si el nuevo número de valores es mayor
					var numValores:int = valores.length;
					if(valores.length < numVals)
					{
						// Insertamos nuevos valores al final
						var oldValores:int = valores.length;
						var newValores:int = numVals;
						for(var i:int = oldValores; i < newValores; i++)
						{
							var vr:ValorDimension = new ValorDimension();
							this.addValorDimension(vr);
							vr.nombre.text = resourceManager.getString("myBundle", "value_text") + i;
						}
						// Actualizamos las subdimensiones
						for(var i:int = 0; i < subDimensiones.length; i++)
						{
							var subDim:Subdimension = subDimensiones.getItemAt(i) as Subdimension;
							subDim.setValores(valores);
						}
						if(valoracionGlobal != null)
						{
							valoracionGlobal.insertar(valores);
						}
					}
					else
					{
						// Si el nuevo número de valores es menor
						if(valores.length > numVals)
						{
							// Eliminamos valores al final
							// Insertamos nuevos valores al final
							var oldValores:int = valores.length;
							var newValores:int = numVals;
							for(var i:int = oldValores-1; i >= newValores; i--)
							{
								this.removeValorRubrica(i);
							}
							// Actualizamos las subdimensiones
							for(var i:int = 0; i < subDimensiones.length; i++)
							{
								var subDim:Subdimension = subDimensiones.getItemAt(i) as Subdimension;
								subDim.setValores(valores);
							}
							if(valoracionGlobal != null)
							{
								valoracionGlobal.insertar(valores);
							}
						}
					}
				}
				actualizarNota();
			}
			
			/**
			 * Establece un porcentaje en la dimensión, respetando los porcentajes del resto de dimensiones
			 */
			 public function insertarPorcentaje(porcent:int, event:MouseEvent=null):void
			 {
			 	if(event != null)
			 	{
			 		if(this.getPorcentajeText() > 100 || this.getPorcentajeText() < 0)
			 		{
			 			this.porcentajeText.text = this.getPorcentaje().toString();
			 			return;
			 		}
			 		else
			 		{
			 			porcent = getPorcentajeText();
			 		}
			 	}
			 	else
			 	{
			 		this.porcentajeText.text = porcent.toString();
			 	}
			 	if(this.getPorcentaje() == 100 && porcent != 100)
			 	{
			 		// No se puede modificar porque el resto de las dimensiones tienen valor 0
			 		Alert.show(resourceManager.getString("myBundle", "warning_percentage"), resourceManager.getString("myBundle", "warning"));
			 		this.setPorcentaje(100);
			 	}
			 	else
			 	{
				 	// Medimos el porcentaje asignado en el caso de que haya uno introducido
					if(porcent <= 100 && porcent >= 0)
					{
						// Si solo tenemos una subdimensión, ponemos directamente 100
						if(this.rubriqa.getElementos().length == 1)
						{
							this.setPorcentaje(100);
						}
						else
						{
							// Comprobamos si el nuevo porcentaje es distinto al anterior
							// Asignamos el nuevo porcentaje
							this.porcentaje = porcent;
							// El porcentaje a asignar al resto de dimensiones es el resto del porcentaje
							var restoPorcentaje:int = 100 - this.porcentaje;
							// El porcentaje a asignar en el caso de que la actualización sea múltiple
							var porcentajeMultiple:int = 0;
							var restoPorcentajeMultiple:int = 0;
							var porcentajeResidual:int = 0; // Porcentaje del resto de dimensiones menos la/s modificada/s
							// Obtenemos las dimensiones restantes y las actualizamos
							var elementos:ArrayCollection = this.rubriqa.getElementos();
							var porcentajes:ArrayCollection = new ArrayCollection(); // Array con los nuevos porcentajes
							var porcentajesMultiple:ArrayCollection = new ArrayCollection();
							
							var restoElementosMultiple:ArrayCollection = new ArrayCollection(); // Array con las dimensiones y valoración global sin porcentaje introducido
							var restoElementos:ArrayCollection = new ArrayCollection(); // Array con el resto de dimensiones y la valoración global
							for(var i:int = 0; i < elementos.length; i++)
							{
								var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
								if(elemento != this)
								{
									// Si he introducido un porcentaje y no lo he actualizado, tiene preferencia el valor introducido
									// Esto es útil para actualización múltiple
									if(elemento.getPorcentajeText() >= 0 && elemento.getPorcentajeText() <= 100)
									{
										if(elemento.getPorcentaje() != elemento.getPorcentajeText())
										{
											porcentajeMultiple += elemento.getPorcentajeText();
											restoElementosMultiple.addItem(elemento);
											porcentajesMultiple.addItem(elemento.getPorcentajeText());
										}
									}
								}
							}
							// Añadimos el porcentaje actual
							porcentajeMultiple += porcent;
							if(restoElementosMultiple.length >= 1)
							{
								restoElementosMultiple.addItem(this);
								porcentajesMultiple.addItem(porcent);
							}
							
							if(restoElementosMultiple.length == elementos.length)
							{
								if(porcentajeMultiple < 98 || porcentajeMultiple > 100)
								{
									Alert.show(resourceManager.getString("myBundle", "error_percentage"), resourceManager.getString("myBundle", "error"));
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
										if(elemento != this)
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												//dimension.setPorcentaje(restoPorcentaje/(dimensiones.length-1));
												porcentajes.addItem((int)(restoPorcentaje/(elementos.length-1)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoRubrica = elementos.getItemAt(j) as ElementoRubrica;
													if(elemento2 != elemento && elemento2 != this)
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
												var nuevoPorcentaje:int = restoPorcentaje / (1 + 1/aux);
												porcentajes.addItem(nuevoPorcentaje);
												restoElementos.addItem(elemento);
											}
										}
									}
								}
								else
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
										elemento.setPorcentaje(elemento.getPorcentajeText());
									}
								}
							}
							else
							{
								// Si el porcentaje múltiple es válido, es decir es menor o igual que 100
								if(porcentajeMultiple <= 100 && porcentajeMultiple > 0 && restoElementosMultiple.length >= 1)
								{	
									restoPorcentajeMultiple = 100 - porcentajeMultiple;
									// Establecemos los porcentajes introducidos
									for(var i:int = 0; i < restoElementosMultiple.length; i++)
									{
										var elemento:ElementoRubrica = restoElementosMultiple.getItemAt(i) as ElementoRubrica;
										(restoElementosMultiple.getItemAt(i) as ElementoRubrica).setPorcentaje(porcentajesMultiple.getItemAt(i) as int);
									}
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
										if(!restoElementosMultiple.contains(elemento))
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												porcentajes.addItem((int)(restoPorcentajeMultiple/(elementos.length - restoElementosMultiple.length)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoRubrica = elementos.getItemAt(j) as ElementoRubrica;
													if(elemento2 != elemento && !restoElementosMultiple.contains(elemento2))
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												if(porcentajeResidual == 0)
												{
													var nuevoPorcentaje:int = restoPorcentajeMultiple;
													porcentajes.addItem(nuevoPorcentaje);
													restoElementos.addItem(elemento);
												}
												else
												{
													var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
													var nuevoPorcentaje:int = restoPorcentajeMultiple / (1 + 1/aux);
													porcentajes.addItem(nuevoPorcentaje);
													restoElementos.addItem(elemento);
												}
											}
										}
									}		
								}
								// Si es mayor, se actualiza en función del valor introducido en la dimensión actual
								else
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
										if(elemento != this)
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												//dimension.setPorcentaje(restoPorcentaje/(dimensiones.length-1));
												porcentajes.addItem((int)(restoPorcentaje/(elementos.length-1)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoRubrica = elementos.getItemAt(j) as ElementoRubrica;
													if(elemento2 != elemento && elemento2 != this)
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
												var nuevoPorcentaje:int = restoPorcentaje / (1 + 1/aux);
												porcentajes.addItem(nuevoPorcentaje);
												restoElementos.addItem(elemento);
											}
										}
									}
								}
							}
							// Una vez obtenidos los nuevos porcentajes, actualizamos
							for(var i:int = 0; i < restoElementos.length; i++)
							{
								(restoElementos.getItemAt(i) as ElementoRubrica).setPorcentaje(porcentajes.getItemAt(i) as int);
							}
						}
					}
				}
				actualizarNota();	
			}
			
			/**
			 * Inserta una dimensión a continuación de la actual
			 */
			private function insertarDim():void
			{
				var dimension:Dimension = new Dimension();
				// Debemos comprobar que el nuevo nombre que insertamos no está repetido
				var nombre:String = this.rubriqa.renombrarDimension(0);
				var dimensiones:ArrayCollection = this.rubriqa.getDimensiones();
				for(var i:int = 0; i < dimensiones.length; i++)
				{
					if(this == dimensiones.getItemAt(i))
					{
						this.rubriqa.addDimension(dimension, i+1);
						dimension.nombre.text = nombre;
						this.rubriqa.numDim.text = (parseInt(this.rubriqa.numDim.text) + 1).toString();
						// Establecemos el porcentaje del nuevo elemento a 0
						if(dimensiones.getItemAt(0) != null)
						{
							if((dimensiones.getItemAt(0) as Dimension).getPorcentaje() != -1)
							{
								//dimension.setPorcentaje(0);
								dimension.insertarPorcentaje((int)(100/(this.getRubrica().getElementos().length)));
							}
						}
					}
				}
			}
			
			public function addValorDimension(vr:ValorDimension):void
			{
				valoresBox.panel.addChild(vr);
				valores.addItem(vr);
				vr.setDimension(this);
			}
			
			private function removeValorRubrica(index:int):void
			{
				valoresBox.panel.removeChildAt(index);
				valores.removeItemAt(index);
			}
			
			public function getValores():ArrayCollection
			{
				return valores;
			}
			
			public function getSubDimensiones():ArrayCollection
			{
				return subDimensiones;
			}
			
			public function addSubDimension(subDim:Subdimension, valoresArr:ArrayCollection, index:int=-1):void
			{
				if(index == -1)
				{
					panel.addChild(subDim);
					subDimensiones.addItem(subDim);
					subDim.setValores(valoresArr);
					subDim.setDimension(this);
					aumentarTamanyo(subDim.height);
				}
				else
				{
					panel.addChildAt(subDim, index);
					subDimensiones.addItemAt(subDim, index);
					subDim.setValores(valoresArr);
					subDim.setDimension(this);
					aumentarTamanyo(subDim.height);
				}
			}
			
			public function addValoracionGlobal(valoresArr:ArrayCollection):void
			{
				valoracionGlobal = new ValoracionDimension();
				panel.addChild(valoracionGlobal);
				valoracionGlobal.insertar(valoresArr);
				valoracionGlobal.setDimension(this);
				this.valGlobal.selected = true;
				aumentarTamanyo(valoracionGlobal.height);
			}
			
			public function getValoracionGlobal():ValoracionDimension
			{
				return this.valoracionGlobal;
			}
			
			/**
			 * Devuelve las dimensiones y la valoración global en el mismo array
			 */
			public function getElementos():ArrayCollection
			{
				var elementos:ArrayCollection = new ArrayCollection();
				for(var i:int = 0; i < subDimensiones.length; i++)
				{
					elementos.addItem(subDimensiones.getItemAt(i));
				}
				if(this.getValoracionGlobal() != null)
				{
					elementos.addItem(this.getValoracionGlobal());
				}
				return elementos;
			}
			
			private function aumentarTamanyo(height:int):void
			{
				/*
				this.height += height + 6;
				this.panel.height += height + 6;
				//this.parent.height += height + 6;
				*/
			}
			
			public function renombrarSubDimension(pos:int):String
			{
				// Debemos comprobar que el nuevo nombre que insertamos no está repetido
				var index:int = pos;
				var seguir:Boolean = true;
				var nombre:String = "SubDimension" + index;
				while(seguir)
				{
					var existe:Boolean = false;
					for(var j:int = 0; j < subDimensiones.length; j++)
					{
						if((subDimensiones.getItemAt(j) as Subdimension).nombre.text == nombre)
						{
							nombre = "SubDimension" + (index++);
							existe = true;
						}
					}
					seguir = existe;
				}
				return nombre;
			}
			
			public function removeSubDimension(subDim:Subdimension, actualizarContador:Boolean=false):void
			{
				for(var i:int = 0; i < subDimensiones.length; i++)
				{
					if(subDimensiones.getItemAt(i) == subDim)
					{
						this.panel.removeChild(subDim);
						subDimensiones.removeItemAt(i);	
						decrementarTamanyo(subDim.height);
						if(actualizarContador)
						{
							this.numSubDim.text = (parseInt(this.numSubDim.text) - 1).toString();
						}
						return;
					}
				}   
			}
			
			public function removeValoracionGlobal(actualizarContador:Boolean=false):void
			{
				for(var i:int = 0; i < panel.getChildren().length; i++)
				{
					if(panel.getChildAt(i) == valoracionGlobal)
					{
						decrementarTamanyo(valoracionGlobal.height);
						valoracionGlobal = null;
						panel.removeChildAt(i);
						if(actualizarContador)
						{
							this.valGlobal.selected = false;
						}
						return;
					}
				}   
			}
			
			private function decrementarTamanyo(height:int):void
			{
				/*
				this.height -= height + 6;
				this.panel.height -= height + 6;
				//this.parent.height -= height + 6;
				*/
			}
			
			public override function setPorcentaje(porcentaje:int):void
			{
				if(porcentaje <= 100 && porcentaje >= 0)
				{
					this.porcentaje = porcentaje;
					this.porcentajeText.text = porcentaje.toString();
				}
			}
			
			public override function getPorcentajeText():int
			{
				return parseInt(porcentajeText.text);
			}
			
			/**
			 * Obtiene el porcentaje evitando redondeos hacia abajo
			 */
			public function getPorcentajeTotal():Number
			{
				var porcentajeTotal:Number = 0;
				var elementos:ArrayCollection = this.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					porcentajeTotal += (elementos.getItemAt(i) as ElementoDimension).getPorcentaje();
				}
				return porcentajeTotal;
			}
			
			/**
			 * Establece los porcentajes por defecto para cada una de las dimensiones
			 */
			public function setPorcentajesPorDefecto(porcentajeElementos:int):void
			{
				// Si el porcentaje es menor que el valor por defecto
				if(porcentajeElementos < Constants.PORCENTAJE_MINIMO)
				{
					var porcentaje:int = (100/this.getElementos().length);
					for(var i:int = 0; i < this.getElementos().length; i++)
					{
						var elem:ElementoDimension = this.getElementos().getItemAt(i) as ElementoDimension;
						elem.setPorcentaje(porcentaje);
					}	
				}
			}
			
			/**
			 * Devuelve la nota obtenida en la dimensión respecto a la nota de sus subdimensiones
			 */
			public override function getNota():Number
			{
				var nota:Number = 0;
				var elementos:ArrayCollection = this.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					nota += (elementos.getItemAt(i) as ElementoDimension).getNota();
				}
				//return Common.redondear(nota*this.getPorcentaje()/getPorcentajeTotal());
				return nota*this.getPorcentaje()/getPorcentajeTotal();
			}
			
			public override function toXML(nivel:int):String
			{
				getValores();
				var texto:String = Common.tabs(nivel) + '<Dimension name="' + this.nombre.text + '" percentage="' + this.getPorcentaje() + '" subdimensions="' + this.subDimensiones.length + '" values="' + valores.length + '">' + "\n";
				texto += Common.tabs(nivel+1) + "<Values>" + "\n";
				for(var i:int = 0; i < valores.length; i++)
				{
					var vd:ValorDimension = valores.getItemAt(i) as ValorDimension;
					texto += vd.toXML(nivel+2) + "\n";
				}	
				texto += Common.tabs(nivel+1) + "</Values>" + "\n";
				var elementos:ArrayCollection = this.getElementos();
				for(i = 0; i < elementos.length; i++)
				{
					texto += (elementos.getItemAt(i) as ElementoDimension).toXML(nivel+1) + "\n";
				}
				texto += Common.tabs(nivel) + "</Dimension>";
				return texto;
			}
			
			public function borrar():void
			{
				this.rubriqa.removeDimension(this, true);
				// Actualizamos los porcentajes del resto de subdimensiones
				var total:int = 0;
				var elementos:ArrayCollection = this.rubriqa.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					total += (elementos.getItemAt(i) as ElementoRubrica).getPorcentaje();
				}
				if(total > 0)
				{
					for(var i:int = 0; i < elementos.length; i++)
					{
						var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
						if(elemento.getPorcentaje() != -1)
						{
							var newPorcentaje:int = (elemento.getPorcentaje()/total) * 100;
							//var newPorcentaje:int = subDim.getPorcentaje() * (oldSubDimensiones/newSubdimensiones) * (total/100));//(oldSubDimensiones/newSubDimensiones) / (total/newSubDimensiones);
							elemento.setPorcentaje(newPorcentaje);
						}
					}
				}
				else if(total == 0)
				{
					for(var i:int = 0; i < elementos.length; i++)
					{
						var elemento:ElementoRubrica = elementos.getItemAt(i) as ElementoRubrica;
						elemento.setPorcentaje(100/elementos.length);
					}		
				}
				actualizarNota();
			}
			
			/**
			 * Deshabilita las opciones de edición para mostrar la ventana de evaluación
			 */
			public override function setVistaEvaluacion():void
			{
				this.valoresBox.visible = false;
				this.valoresBox.height = 0;
				//this.height -= this.valoresBox.height;
				this.valoresBox.height = 0;
				this.buttonAnyadir.visible = false;
				this.buttonBorrar.visible = false;
				this.buttonPorcentaje.enabled = false;
				this.porcentajeText.editable = false;
				this.nombre.editable = false;
				this.numVal.editable = false;
				this.numSubDim.editable = false;
				this.valGlobal.enabled = false;
				this.buttonInsertar.visible = false;
				
				// Ocultamos los elementos sobrantes
				if(encabezado.contains(this.numSubDim))encabezado.removeChild(this.numSubDim);
				if(encabezado.contains(this.numVal))encabezado.removeChild(this.numVal);
				if(encabezado.contains(this.LabelSubdimensiones))encabezado.removeChild(this.LabelSubdimensiones);
				if(encabezado.contains(this.LabelValores))encabezado.removeChild(this.LabelValores);
				if(encabezado.contains(this.valGlobal))encabezado.removeChild(this.valGlobal);
				
				// Ajustamos la altura de los campos de texto
				var fuente:int = this.nombre.getStyle("fontSize");
				//this.nomDim.setStyle("fontSize", fuente+2); 
				this.nombre.setStyle("fontStyle", "italic");
				// Ponemos en negrita el título
				this.nombre.setStyle("fontWeight", "bold");
				this.nombre.validateNow();
				// Ajustamos la anchura del título hasta un máximo
				var altura:Number = this.nombre.getTextField().textHeight;
				while(this.nombre.getTextField().textHeight > this.nombre.getStyle("fontSize")*2 && this.nombre.width < 600)
				{
					this.nombre.width = this.nombre.width*(1.1);
				}
				this.nombre.validateNow();
				this.nombre.height = this.nombre.getTextField().textHeight + this.nombre.getLineMetrics(0).height;
				
				// Establecemos la vista de evalación para los elementos hijo
				var elementos:ArrayCollection = this.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					(elementos.getItemAt(i) as ElementoDimension).setVistaEvaluacion();
				}
				// Establecemos la vista de evaluación para los valores
				var valores:ArrayCollection = this.getValores();
				for(var i:int = 0; i < this.getValores().length; i++)
				{
					(valores.getItemAt(i) as ValorDimension).setVistaEvaluacion();
				}
			}
			
			public override function ajustarTamanyo(evaluacion:Boolean=false):void
			{
				if(evaluacion)
				{
					this.nombre.validateNow();
					this.nombre.height = this.nombre.getTextField().textHeight + this.nombre.getLineMetrics(0).height;
				}
				var elementos:ArrayCollection = this.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					(elementos.getItemAt(i) as ElementoDimension).ajustarTamanyo(evaluacion);
				}	
			}
			
			public override function getAdvertencias(advertencias:ArrayCollection):void
			{
				// Comprobamos el nombre
				if(this.getName() == null || Common.trim(this.getName()) == "")
				{
					advertencias.addItem(resourceManager.getString("myBundle", "warning_dimension_name") + "\n" + this.localization());
				}
				if(this.getValores() != null)
				{
					// Comprobamos los nombres de los valores
					for(var i:int = 0; i < this.getValores().length; i++)
					{
						var vd:ValorDimension = this.getValores().getItemAt(i) as ValorDimension;
						if(vd.getName() == null || Common.trim(vd.getName()) == "")
						{
							advertencias.addItem(resourceManager.getString("myBundle", "warning_name_value_dimension") + "\n" + this.localization());
						}
					}
					// Comprobamos si no hay más de un valor
					if(this.getValores().length == 1)
					{
						advertencias.addItem(resourceManager.getString("myBundle", "warning_one_value_dimension") + "\n" + this.localization());
					}
				}
				// Comprobamos los elementos
				for(var i:int = 0; i < this.getElementos().length; i++)
				{
					(this.getElementos().getItemAt(i) as ElementoDimension).getAdvertencias(advertencias);
				}
				// Comprobamos el porcentaje
				if(this.getPorcentaje() == 0)
				{
					advertencias.addItem(resourceManager.getString("myBundle", "warning_dimension_percentage") + "\n" + this.localization());
				}
			}
			
			public override function getErrores(errores:ArrayCollection):void
			{
				// Comprobamos si está vacía
				if(this.getSubDimensiones() == null || this.getSubDimensiones().length == 0)
				{
					errores.addItem(resourceManager.getString("myBundle", "error_dimension_empty") + "\n" + this.localization());
				}
				// Comprobamos los atributos
				for(var i:int = 0; i < this.getElementos().length; i++)
				{
					(this.getElementos().getItemAt(i) as ElementoDimension).getErrores(errores);
				}
			}
			
			private function localization():String
			{
				var localizacion:String =
				resourceManager.getString("myBundle", "dimension") + this.getName() + " at" +
				"\n" + resourceManager.getString("myBundle", "rubric") + ":" + this.getRubrica().getName();
				return localizacion;
			}
		]]>
	</mx:Script>
</ElementoRubrica>
