<?xml version="1.0" encoding="utf-8"?>
<ElementoDimension xmlns="listaControlEscalaValoracion.*" xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#DAEFE9" borderStyle="solid" color="#0C4A15" borderThickness="2" borderColor="#FFFFFF" verticalScrollPolicy="off" verticalGap="0">
	<mx:Button id="buttonBorrar" click="borrar()" x="1" y="0" width="12" cornerRadius="0" icon="@Embed(source='../img/iconClose2.gif')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" height="12" alpha="1.0"/>
	<mx:HBox id="encabezado" horizontalGap="12" x="10" y="12">
		<mx:Label x="27" y="12" text="@Resource(bundle='myBundle', key='dimension_assessment')" fontWeight="bold" id="LabelTitulo" paddingLeft="10" paddingBottom="10"/>
		<mx:Label x="259" y="12" text="@Resource(bundle='myBundle', key='percentage')" toolTip="@Resource(bundle='myBundle', key='help_percentage')" id="LabelPorcentaje"/>
		<mx:TextInput width="34" maxChars="3" id="porcentajeText" backgroundColor="#000000" color="#00F00F" fontFamily="Verdana" textAlign="right" fontWeight="bold" restrict="/0-9/"/>
		<mx:Button id="buttonPorcentaje" x="409" y="10" width="18" cornerRadius="0" icon="@Embed(source='../img/iconPrctg.gif')" click="insertarPorcentaje(0, event);"/>
	</mx:HBox>
	<mx:HBox width="100%" horizontalGap="0">
		<mx:Label text="@Resource(bundle='myBundle', key='selection_values')" fontWeight="bold" height="24" id="LabelTabla" width="300" textAlign="right"/>
		<mx:HBox id="valoresBox" width="100%" height="24" backgroundColor="#F7F9FA" horizontalGap="0" backgroundAlpha="0.0">
		</mx:HBox>
	</mx:HBox>
	<mx:HBox id="atributosBox" x="10" y="70" width="100%" paddingBottom="10" paddingLeft="10">
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import utilidades.Common;
			import mx.collections.ArrayCollection;
			import mx.controls.TextInput;
			import mx.controls.Label;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.Grid;
			
			private var numValores:int = 0;
			private var atributo:AtributoValoracionGlobal = null;
			
			/**
			 * Establece el núemro de valores de la dimensión para la tabla de atributos
			 */
			public function insertar(valores:ArrayCollection):void
			{
				// Si ya había asignado valores actualizamos los existentes
				if(this.numValores != 0)
				{
					// Si ahora hay más
					if(valores.length > this.numValores)
					{
						for(var i:int = numValores; i < valores.length; i++)
						{
							var ti:TextInput = valores.getItemAt(i) as TextInput;
							valoresBox.addChild(ti);
							ti.validateNow();
							if(ti.textWidth+20 > ti.minWidth)
							{
								ti.width = ti.textWidth+20;
							}
							else
							{
								ti.width = ti.minWidth;
							}
							atributo.anyadirCasillaValor(i);
						}
					}
					else
					{
						// Si hay menos
						if(valores.length < this.numValores)
						{
							for(var i:int = numValores-1; i >= valores.length; i--)
							{
								this.valoresBox.removeChildAt(i);
								atributo.eliminarCasillaValor(i);
							}
						}
					}
					// Actualizamos el número de valores
					this.numValores = valores.length;
				}
				else
				{
					// Si es la primera vez que insertamos
					// Creamos el atributo
					// Creamos los valores
					this.numValores = valores.length;
					for(var i:int = 0; i < valores.length; i++)
					{
						var ti:TextInput = valores.getItemAt(i) as TextInput;
						valoresBox.addChild(ti);
						ti.validateNow();
						if(ti.textWidth+20 > ti.minWidth)
						{
							ti.width = ti.textWidth+20;
						}
						else
						{
							ti.width = ti.minWidth;
						}
					}
					addAtributo(new AtributoValoracionGlobal());
				}
			}
			
			/**
			 * Establece un porcentaje en la subdimensión, respetando los porcentajes del resto de dimensiones
			 */
			 public function insertarPorcentaje(porcent:int, event:MouseEvent=null):void
			 {
			 	if(event != null)
			 	{
			 		if(this.getPorcentajeText() > 100 || this.getPorcentajeText() < 0)
			 		{
			 			this.porcentajeText.text = this.getPorcentaje().toString();
			 			return;
			 		}
			 		else
			 		{
			 			porcent = getPorcentajeText();
			 		}
			 	}
			 	else
			 	{
			 		this.porcentajeText.text = porcent.toString();
			 	}
			 	if(this.getPorcentaje() == 100 && porcent != 100)
			 	{
			 		// No se puede modificar porque el resto de las dimensiones tienen valor 0
			 		Alert.show(resourceManager.getString("myBundle", "warning_percentage"), resourceManager.getString("myBundle", "warning"));
			 		this.setPorcentaje(100);
			 	}
			 	else
			 	{
				 	// Medimos el porcentaje asignado en el caso de que haya uno introducido
					if(porcent <= 100 && porcent >= 0)
					{
						// Si solo tenemos una subdimensión, ponemos directamente 100
						if(this.dimension.getElementos().length == 1)
						{
							this.setPorcentaje(100);
						}
						else
						{
							// Comprobamos si el nuevo porcentaje es distinto al anterior
							// Asignamos el nuevo porcentaje
							this.porcentaje = porcent;
							// El porcentaje a asignar al resto de dimensiones es el resto del porcentaje
							var restoPorcentaje:int = 100 - this.porcentaje;
							// El porcentaje a asignar en el caso de que la actualización sea múltiple
							var porcentajeMultiple:int = 0;
							var restoPorcentajeMultiple:int = 0;
							var porcentajeResidual:int = 0; // Porcentaje del resto de dimensiones menos la/s modificada/s
							// Obtenemos las dimensiones restantes y las actualizamos
							var elementos:ArrayCollection = this.dimension.getElementos();
							var porcentajes:ArrayCollection = new ArrayCollection(); // Array con los nuevos porcentajes
							var porcentajesMultiple:ArrayCollection = new ArrayCollection();
							
							var restoElementosMultiple:ArrayCollection = new ArrayCollection(); // Array con las dimensiones y valoración global sin porcentaje introducido
							var restoElementos:ArrayCollection = new ArrayCollection(); // Array con el resto de dimensiones y la valoración global
							for(var i:int = 0; i < elementos.length; i++)
							{
								var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
								if(elemento != this)
								{
									// Si he introducido un porcentaje y no lo he actualizado, tiene preferencia el valor introducido
									// Esto es útil para actualización múltiple
									if(elemento.getPorcentajeText() >= 0 && elemento.getPorcentajeText() <= 100)
									{
										if(elemento.getPorcentaje() != elemento.getPorcentajeText())
										{
											porcentajeMultiple += elemento.getPorcentajeText();
											restoElementosMultiple.addItem(elemento);
											porcentajesMultiple.addItem(elemento.getPorcentajeText());
										}
									}
								}
							}
							// Añadimos el porcentaje actual
							porcentajeMultiple += porcent;
							if(restoElementosMultiple.length >= 1)
							{
								restoElementosMultiple.addItem(this);
								porcentajesMultiple.addItem(porcent);
							}
							
							if(restoElementosMultiple.length == elementos.length)
							{
								if(porcentajeMultiple < 98 || porcentajeMultiple > 100)
								{
									Alert.show(resourceManager.getString("myBundle", "error_percentage"), resourceManager.getString("myBundle", "error"));
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										if(elemento != this)
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												//dimension.setPorcentaje(restoPorcentaje/(dimensiones.length-1));
												porcentajes.addItem((int)(restoPorcentaje/(elementos.length-1)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoDimension = elementos.getItemAt(j) as ElementoDimension;
													if(elemento2 != elemento && elemento2 != this)
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
												var nuevoPorcentaje:int = restoPorcentaje / (1 + 1/aux);
												porcentajes.addItem(nuevoPorcentaje);
												restoElementos.addItem(elemento);
											}
										}
									}
								}
								else
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										elemento.setPorcentaje(elemento.getPorcentajeText());
									}
								}
							}
							else
							{
								// Si el porcentaje múltiple es válido, es decir es menor o igual que 100
								if(porcentajeMultiple <= 100 && porcentajeMultiple > 0 && restoElementosMultiple.length >= 1)
								{	
									restoPorcentajeMultiple = 100 - porcentajeMultiple;
									// Establecemos los porcentajes introducidos
									for(var i:int = 0; i < restoElementosMultiple.length; i++)
									{
										var elemento:ElementoDimension = restoElementosMultiple.getItemAt(i) as ElementoDimension;
										(restoElementosMultiple.getItemAt(i) as ElementoDimension).setPorcentaje(porcentajesMultiple.getItemAt(i) as int);
									}
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										if(!restoElementosMultiple.contains(elemento))
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												porcentajes.addItem((int)(restoPorcentajeMultiple/(elementos.length - restoElementosMultiple.length)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoDimension = elementos.getItemAt(j) as ElementoDimension;
													if(elemento2 != elemento && !restoElementosMultiple.contains(elemento2))
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												if(porcentajeResidual == 0)
												{
													var nuevoPorcentaje:int = restoPorcentajeMultiple;
													porcentajes.addItem(nuevoPorcentaje);
													restoElementos.addItem(elemento);
												}
												else
												{
													var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
													var nuevoPorcentaje:int = restoPorcentajeMultiple / (1 + 1/aux);
													porcentajes.addItem(nuevoPorcentaje);
													restoElementos.addItem(elemento);
												}
											}
										}
									}		
								}
								// Si es mayor, se actualiza en función del valor introducido en la dimensión actual
								else
								{
									for(var i:int = 0; i < elementos.length; i++)
									{
										var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
										if(elemento != this)
										{
											// Si todavía no tenía porcentaje asignado
											if(elemento.porcentaje == -1)
											{
												//dimension.setPorcentaje(restoPorcentaje/(dimensiones.length-1));
												porcentajes.addItem((int)(restoPorcentaje/(elementos.length-1)));
												restoElementos.addItem(elemento);
											}
											// Si tenía porcentaje asignado, actualizamos manteniendo la proporción
											else
											{
												// Obtengo el resto de porcentajes
												porcentajeResidual = 0;
												for(var j:int = 0; j < elementos.length; j++)
												{
													var elemento2:ElementoDimension = elementos.getItemAt(j) as ElementoDimension;
													if(elemento2 != elemento && elemento2 != this)
													{
														porcentajeResidual += elemento2.getPorcentaje();
													}
												}
												var aux:Number = (elemento.getPorcentaje() / porcentajeResidual);
												var nuevoPorcentaje:int = restoPorcentaje / (1 + 1/aux);
												porcentajes.addItem(nuevoPorcentaje);
												restoElementos.addItem(elemento);
											}
										}
									}
								}
							}
							// Una vez obtenidos los nuevos porcentajes, actualizamos
							for(var i:int = 0; i < restoElementos.length; i++)
							{
								(restoElementos.getItemAt(i) as ElementoDimension).setPorcentaje(porcentajes.getItemAt(i) as int);
							}
						}
					}
				}
				actualizarNota();	
			}
			
			private function addValor(index:int):void
			{
				var valor:TextInput = new TextInput();
				valor.width = 100;
				valor.text = resourceManager.getString("myBundle", "value_text") + index;
				this.valoresBox.addChild(valor);
			}
			
			public function addAtributo(atr:AtributoValoracionGlobal):void
			{
				atributo = atr;
				atributo.setStyle("borderSides", "none");
				atributosBox.addChild(atributo);
				atributo.insertar(this.numValores, this.getValores().toArray());
				atributo.nombre.text = resourceManager.getString("myBundle", "global_assessment_text");;
				atributo.setValoracionDimension(this);
				atributo.setPorcentaje(100);
			}
			
			public function getNumValores():int
			{
				return this.numValores;
			}
			
			public function getValores():ArrayCollection
			{
				var valores:ArrayCollection = new ArrayCollection();
				for(var i:int = 0; i < this.valoresBox.numChildren; i++)
				{
					if(this.valoresBox.getChildAt(i) is TextInput)
					{
						valores.addItem(valoresBox.getChildAt(i));
					}
				}
				return valores;
			}
			
			public function getAtributo():AtributoValoracionGlobal
			{
				return this.atributo;
			}
			
			public override function setPorcentaje(porcentaje:int):void
			{
				if(porcentaje <= 100 && porcentaje >= 0)
				{
					this.porcentaje = porcentaje;
					this.porcentajeText.text = porcentaje.toString();
				}
			}
			
			public override function getPorcentajeText():int
			{
				return parseInt(porcentajeText.text);
			}
			
			/**
			 * Devuelve la nota obtenida en la dimensión respecto a la nota de sus subdimensiones
			 */
			public override function getNota():Number
			{
				return (this.atributo.getNota()*this.getPorcentaje())/100;
			}
			
			/**
			 * Función que transforma la clase en un objeto XML
			 */
			public override function toXML(nivel:int):String
			{
				// Construimos el texto XML
				var texto:String = Common.tabs(nivel) + '<DimensionAssessment percentage="' + this.getPorcentaje() + '">\n';
				// Concatenamos los XML del atributo
				texto+= atributo.toXML(nivel+1) + "\n";
				// Cerramos el XML
				texto+= Common.tabs(nivel) + "</DimensionAssessment>";
				return texto;
			}
			
			public function borrar():void
			{
				// Borramos de la lógica
				this.dimension.removeValoracionGlobal(true);
				// Actualizamos los porcentajes del resto de subdimensiones
				var total:int = 0;
				var elementos:ArrayCollection = this.dimension.getElementos();
				for(var i:int = 0; i < elementos.length; i++)
				{
					total += (elementos.getItemAt(i) as ElementoDimension).getPorcentaje();
				}
				if(total > 0)
				{
					for(var i:int = 0; i < elementos.length; i++)
					{
						var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
						if(elemento.getPorcentaje() != -1)
						{
							var newPorcentaje:int = (elemento.getPorcentaje()/total) * 100;
							//var newPorcentaje:int = subDim.getPorcentaje() * (oldSubDimensiones/newSubdimensiones) * (total/100));//(oldSubDimensiones/newSubDimensiones) / (total/newSubDimensiones);
							elemento.setPorcentaje(newPorcentaje);
						}
					}
				}
				else if(total == 0)
				{
					for(var i:int = 0; i < elementos.length; i++)
					{
						var elemento:ElementoDimension = elementos.getItemAt(i) as ElementoDimension;
						elemento.setPorcentaje(100/elementos.length);
					}		
				}
				actualizarNota();
			}
			
			public override function ajustarLongitud(longitud:int, index:int, grupo:int=0):void
			{
				this.getAtributo().ajustarLongitud(longitud, index);
			}
			
			/**
			 * Deshabilita las opciones de edición para mostrar la ventana de evaluación
			 */
			public override function setVistaEvaluacion():void
			{
				this.buttonBorrar.visible = false;
				this.buttonPorcentaje.enabled = false;
				this.porcentajeText.editable = false;
				this.getAtributo().setVistaEvaluacion();
				for(var i:int = 0; i < this.getValores().length; i++)
				{
					(this.getValores()[i] as TextInput).editable = false;
				}
			}
			
			public override function ajustarTamanyo(evaluacion:Boolean=false):void
			{
				// Ajustamos la longitud de los campos de texto
				for(var i:int = 0; i < this.getValores().length; i++)
				{
					var ti:TextInput = this.getValores()[i] as TextInput;
					ti.validateNow();
					if(ti.textWidth+20 > ti.minWidth)
					{
						ti.width = ti.textWidth+20;
					}	
					else
					{
						ti.width = ti.minWidth;
					}
					ajustarLongitud(ti.width, i);
				}	
			}
			
			public override function getAdvertencias(advertencias:ArrayCollection):void
			{
				// Comprobamos los atributos
				this.getAtributo().getAdvertencias(advertencias);
				if(this.getPorcentaje() == 0)
				{
					advertencias.addItem(resourceManager.getString("myBundle", "warning_dimension_assessment_percentage") + "\n" + this.localization());
				}
			}
			
			public override function getErrores(errores:ArrayCollection):void
			{
				// Comprobamos los atributos
				this.getAtributo().getErrores(errores);
			}
			
			private function localization():String
			{
				var localizacion:String =
				resourceManager.getString("myBundle", "dimension_assessment_text") + " at" +
				"\n" + resourceManager.getString("myBundle", "dimension") + this.getDimension().getName() + " at" +
				"\n" + resourceManager.getString("myBundle", "control_list_value_list") + ":" + this.getDimension().getInstrumento().getName();
				return localizacion;
			}
		]]>
	</mx:Script>
</ElementoDimension>
